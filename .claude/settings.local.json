{
  "permissions": {
    "allow": [
      "Bash(git remote set-url:*)",
      "Bash(git push:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(python:*)",
      "Bash(uv run:*)",
      "Bash(LOG_LEVEL=DEBUG uv run python tests/test_010_modular_llm_architecture.py)",
      "Bash(chmod:*)",
      "Bash(curl:*)",
      "Bash(ls:*)",
      "Bash(timeout 60 uv run pytest:*)",
      "Bash(timeout 60 uv run:*)",
      "Bash(timeout 30 uv run:*)",
      "Bash(rm:*)",
      "Bash(sudo chown:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker exec:*)",
      "Bash(SQLITE_PATH=\"data/rag_system.db\" uv run python backend/scripts/migrate_to_postgresql.py)",
      "Bash(pkill:*)",
      "Bash(mkdir:*)",
      "Bash(uv sync:*)",
      "Bash(PYTHONPATH=/home/gustavo/Documents/Vanguarda uv run python backend/tests/test_021_whatsapp_integration.py)",
      "Bash(PYTHONPATH=/home/gustavo/Documents/Vanguarda uv run python ./backend/tests/test_021_whatsapp_integration.py)",
      "Bash(uv pip install:*)",
      "Bash(uv add:*)",
      "Bash(uv pip:*)",
      "Bash(docker compose:*)",
      "Bash(docker logs:*)",
      "Bash(touch:*)",
      "Bash(docker:*)",
      "Bash(echo)",
      "mcp__ide__getDiagnostics",
      "Bash(# Monitor logs while refreshing browser\ntimeout 10 docker compose -f docker-compose.dev.yml logs -f frontend | grep -E \"\"(system/health|system/models)\"\" || echo \"\"No health/models calls detected in 10 seconds\"\")",
      "Bash(# Monitor logs for the next 15 seconds to catch browser refresh\ntimeout 15 docker compose -f docker-compose.dev.yml logs -f frontend backend 2>/dev/null | grep -E \"\"(system/health|system/models|GET.*200|GET.*404)\"\" || echo \"\"Monitoring complete\"\")",
      "Bash(# Monitor all containers for 20 seconds to capture browser loading\ntimeout 20 docker compose -f docker-compose.dev.yml logs -f --tail=0 2>/dev/null | grep -E \"\"(GET|POST|PUT|DELETE|PATCH)\"\" | head -50 || echo \"\"Monitoring completed - no HTTP requests seen\"\")",
      "Bash(# Simulate browser by making several requests that a browser would make\ncurl -s -H \"\"User-Agent: Mozilla/5.0\"\" http://localhost:3000/ > /dev/null &\ncurl -s -H \"\"User-Agent: Mozilla/5.0\"\" http://localhost:3000/assets/index-CXvq5827.js > /dev/null &\ncurl -s -H \"\"User-Agent: Mozilla/5.0\"\" http://localhost:3000/assets/index-9JfII0E0.css > /dev/null &\nwait\necho \"\"Browser simulation requests sent\"\")",
      "Bash(# Let me create a simple HTML file to test the API calls manually\ncat > /tmp/test.html << ''EOF''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>API Test</title>\n</head>\n<body>\n    <h1>Testing API Calls</h1>\n    <div id=\"\"results\"\"></div>\n    <script>\n        const results = document.getElementById(''results'');\n        \n        function log(message) {\n            console.log(message);\n            results.innerHTML += ''<p>'' + message + ''</p>'';\n        }\n        \n        async function testAPIs() {\n            log(''Starting API tests...'');\n            \n            // Test system health\n            try {\n                log(''Testing /api/system/health...'');\n                const healthResponse = await fetch(''/api/system/health'');\n                const healthData = await healthResponse.json();\n                log(''‚úÖ /api/system/health: '' + JSON.stringify(healthData).substring(0, 100));\n            } catch (error) {\n                log(''‚ùå /api/system/health failed: '' + error.message);\n            }\n            \n            // Test system models\n            try {\n                log(''Testing /api/system/models...'');\n                const modelsResponse = await fetch(''/api/system/models'');\n                const modelsData = await modelsResponse.json();\n                log(''‚úÖ /api/system/models: '' + JSON.stringify(modelsData).substring(0, 100));\n            } catch (error) {\n                log(''‚ùå /api/system/models failed: '' + error.message);\n            }\n            \n            // Test business metrics\n            try {\n                log(''Testing /api/system/business-metrics...'');\n                const metricsResponse = await fetch(''/api/system/business-metrics'');\n                const metricsData = await metricsResponse.json();\n                log(''‚úÖ /api/system/business-metrics: '' + JSON.stringify(metricsData).substring(0, 100));\n            } catch (error) {\n                log(''‚ùå /api/system/business-metrics failed: '' + error.message);\n            }\n        }\n        \n        // Run tests when page loads\n        window.onload = testAPIs;\n    </script>\n</body>\n</html>\nEOF\necho \"\"Test HTML created at /tmp/test.html\"\")",
      "Bash(# Check if there are any CORS or other headers that might be affecting browser behavior\ncurl -H \"\"Accept: */*\"\" -H \"\"Origin: http://localhost:3000\"\" -v http://localhost:3000/api/system/health 2>&1 | head -20)",
      "Bash(# Check if there''s any caching issue by testing with cache-control headers  \ncurl -H \"\"Cache-Control: no-cache\"\" -H \"\"Pragma: no-cache\"\" http://localhost:3000/api/system/health)",
      "Bash(# Test API reachability from frontend container to backend\ndocker compose -f docker-compose.dev.yml exec frontend curl -s http://backend:8000/api/system/health)",
      "Bash(# Verify which port we should be using based on docker-compose.dev.yml\ngrep -A5 -B5 \"\"3000\\|80\"\" /home/gustavo/Documents/Vanguarda/docker-compose.dev.yml)",
      "Bash(# Clear any previous logs and start fresh monitoring\ndocker compose -f docker-compose.dev.yml logs --since=1m > /dev/null 2>&1)",
      "Bash(# Start monitoring with timestamp for the next 60 seconds\necho \"\"üîç MONITORING INICIADO - Por favor, abra http://localhost:3000 no navegador AGORA\"\"\necho \"\"‚è∞ $(date): Aguardando acesso do browser...\"\"\ntimeout 60 docker compose -f docker-compose.dev.yml logs -f --tail=0 frontend backend 2>/dev/null | while read line; do\n    echo \"\"$(date ''+%H:%M:%S'') | $line\"\"\ndone || echo \"\"‚è∞ $(date): Monitoramento finalizado ap√≥s 60 segundos\"\")",
      "Bash(git add:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(git commit:*)"
    ],
    "deny": []
  }
}