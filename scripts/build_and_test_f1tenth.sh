#!/bin/bash

# =============================================================================
# F1TENTH - Build e Teste Completo do Sistema
# Este script faz build completo e testa todos os componentes
# =============================================================================

set -e

echo "üèéÔ∏è F1TENTH - Build e Teste do Sistema Completo" 
echo "==============================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "src/f1tenth_control/package.xml" ]; then
    echo "‚ùå ERRO: Execute este script no diret√≥rio raiz do workspace F1TENTH"
    echo "   cd ~/Documents/f1tenth_code_rasp"
    exit 1
fi

# Fun√ß√£o para logging
log_info() {
    echo "‚ÑπÔ∏è  $1"
}

log_success() {
    echo "‚úÖ $1"
}

log_error() {
    echo "‚ùå $1"
}

# 1. CONFIGURAR AMBIENTE
log_info "Configurando ambiente ROS2..."
source /opt/ros/humble/setup.bash
export RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# 2. LIMPAR BUILD ANTERIOR
log_info "Limpando build anterior..."
rm -rf build/ install/ log/

# 3. BUILD DO SISTEMA
log_info "Iniciando build do sistema F1TENTH..."
echo "======================================"

# Build com informa√ß√µes detalhadas
colcon build --symlink-install \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --event-handlers console_direct+ \
    --parallel-workers $(nproc)

if [ $? -eq 0 ]; then
    log_success "Build conclu√≠do com sucesso!"
else
    log_error "Falha no build do sistema"
    exit 1
fi

# 4. SOURCE DO WORKSPACE
log_info "Configurando workspace..."
source install/setup.bash

# 5. VALIDA√á√ÉO DOS PACOTES
log_info "Validando pacotes instalados..."

# Verificar se os pacotes principais foram instalados
PACKAGES=(
    "f1tenth_control"
    "joy_converter" 
    "vesc_msgs"
    "vesc_driver"
    "vesc_ackermann"
    "ydlidar_ros2_driver"
)

for package in "${PACKAGES[@]}"; do
    if [ -d "install/$package" ]; then
        log_success "Pacote $package: OK"
    else
        log_error "Pacote $package: FALHOU"
        exit 1
    fi
done

# 6. TESTE DE NODES DISPON√çVEIS
log_info "Verificando nodes dispon√≠veis..."

# Verificar execut√°veis do f1tenth_control
if [ -x "install/f1tenth_control/lib/f1tenth_control/servo_control_node" ]; then
    log_success "Node servo_control_node: OK"
else
    log_error "Node servo_control_node: N√ÉO ENCONTRADO"
fi

if [ -x "install/f1tenth_control/lib/f1tenth_control/enhanced_servo_control_node" ]; then
    log_success "Node enhanced_servo_control_node: OK"
else 
    log_error "Node enhanced_servo_control_node: N√ÉO ENCONTRADO"
fi

# 7. TESTE DE LAUNCH FILES
log_info "Verificando launch files..."

LAUNCH_FILES=(
    "install/f1tenth_control/share/f1tenth_control/launch/f1tenth_complete_system.launch.py"
    "install/f1tenth_control/share/f1tenth_control/launch/f1tenth_system.launch.py"
    "install/f1tenth_control/share/f1tenth_control/launch/f1tenth_control.launch.py"
)

for launch_file in "${LAUNCH_FILES[@]}"; do
    if [ -f "$launch_file" ]; then
        filename=$(basename "$launch_file")
        log_success "Launch file $filename: OK"
    else
        filename=$(basename "$launch_file")
        log_error "Launch file $filename: N√ÉO ENCONTRADO"
    fi
done

# 8. TESTE DE CONFIGURA√á√ïES
log_info "Verificando arquivos de configura√ß√£o..."

CONFIG_FILES=(
    "install/f1tenth_control/share/f1tenth_control/config/system_config.yaml"
    "install/f1tenth_control/share/f1tenth_control/config/control_params.yaml"
)

for config_file in "${CONFIG_FILES[@]}"; do
    if [ -f "$config_file" ]; then
        filename=$(basename "$config_file")
        log_success "Config $filename: OK"
    else
        filename=$(basename "$config_file")
        log_error "Config $filename: N√ÉO ENCONTRADO"
    fi
done

# 9. TESTE B√ÅSICO DE COMUNICA√á√ÉO ROS2
log_info "Testando comunica√ß√£o ROS2 b√°sica..."

# Teste r√°pido se o ROS2 est√° funcionando
timeout 5s ros2 node list > /dev/null 2>&1
if [ $? -eq 0 ]; then
    log_success "Comunica√ß√£o ROS2: OK"
else
    log_error "Comunica√ß√£o ROS2: PROBLEMA"
fi

# 10. VERIFICAR DEPEND√äNCIAS DE HARDWARE
log_info "Verificando depend√™ncias de hardware..."

# pigpio
if systemctl is-active --quiet pigpiod; then
    log_success "Servi√ßo pigpiod: ATIVO"
else
    log_error "Servi√ßo pigpiod: INATIVO"
    echo "   Execute: sudo systemctl start pigpiod"
fi

# YDLiDAR SDK
if [ -f "/usr/local/lib/libydlidar_sdk.so" ]; then
    log_success "YDLiDAR SDK: INSTALADO"
else
    log_error "YDLiDAR SDK: N√ÉO ENCONTRADO"
    echo "   Execute o script setup_raspberry_dependencies.sh"
fi

# Grupos do usu√°rio
if groups $USER | grep -q "dialout"; then
    log_success "Grupo dialout: OK"
else
    log_error "Grupo dialout: FALTANDO"
    echo "   Execute: sudo usermod -a -G dialout $USER"
fi

if groups $USER | grep -q "gpio"; then
    log_success "Grupo gpio: OK"
else
    log_error "Grupo gpio: FALTANDO"
    echo "   Execute: sudo usermod -a -G gpio $USER"
fi

echo ""
echo "üéâ VALIDA√á√ÉO COMPLETA FINALIZADA!"
echo "================================="
echo ""
echo "üìã RESUMO DO SISTEMA:"
echo "- Build: ‚úÖ Conclu√≠do com sucesso"
echo "- Pacotes: ‚úÖ Todos instalados"
echo "- Launch files: ‚úÖ Dispon√≠veis"
echo "- Configura√ß√µes: ‚úÖ Presentes"
echo ""
echo "üöÄ COMANDOS PARA TESTAR O SISTEMA:"
echo ""
echo "1. Teste b√°sico do servo:"
echo "   ros2 launch f1tenth_control f1tenth_control.launch.py"
echo ""
echo "2. Sistema completo (recomendado):"
echo "   ros2 launch f1tenth_control f1tenth_complete_system.launch.py"
echo ""
echo "3. Monitoramento (em outro terminal):"
echo "   ros2 topic list"
echo "   ros2 topic echo /ego_racecar/odom"
echo "   ros2 topic echo /drive"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "- Certifique-se que o hardware est√° conectado (VESC, servo, LiDAR)"
echo "- O LiDAR ser√° inicializado ap√≥s 3 segundos do sistema principal" 
echo "- Use Ctrl+C para parar o sistema com seguran√ßa" 