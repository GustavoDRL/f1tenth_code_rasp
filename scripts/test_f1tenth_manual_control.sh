#!/bin/bash
# Script de teste completo para controle manual F1TENTH
# Valida joystick ‚Üí drive ‚Üí hardware em sequ√™ncia

set -e

echo "üéÆ TESTE CONTROLE MANUAL F1TENTH"
echo "================================="
echo "Data: $(date)"
echo

# Configura√ß√µes
WORKSPACE_DIR="/home/disney/Documents/f1tenth_code_rasp"
LOG_FILE="~/test_manual_control_$(date +%Y%m%d_%H%M%S).log"
TEST_DURATION=30

# Navegar para workspace
cd $WORKSPACE_DIR

# Fun√ß√£o de log
log() {
    echo "[$(date '+%H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log "üöÄ Iniciando teste controle manual F1TENTH"

# FASE 1: Verifica√ß√£o pr√©-requisitos
echo "FASE 1: Verifica√ß√£o pr√©-requisitos"
echo "=================================="

# Verificar joystick
if ls /dev/input/js* >/dev/null 2>&1; then
    JOYSTICK_DEV=$(ls /dev/input/js* | head -1)
    log "‚úÖ Joystick detectado: $JOYSTICK_DEV"
else
    log "‚ùå ERRO: Nenhum joystick detectado"
    echo "Execute primeiro: bash scripts/detect_8bitdo_controller.sh"
    exit 1
fi

# Verificar permiss√µes
if [ -r "$JOYSTICK_DEV" ] && [ -w "$JOYSTICK_DEV" ]; then
    log "‚úÖ Permiss√µes joystick OK"
else
    log "‚ùå ERRO: Permiss√µes insuficientes para $JOYSTICK_DEV"
    echo "Execute: sudo chmod 666 $JOYSTICK_DEV"
    exit 1
fi

# Verificar ROS2
if command -v ros2 >/dev/null 2>&1; then
    log "‚úÖ ROS2 dispon√≠vel"
else
    log "‚ùå ERRO: ROS2 n√£o encontrado"
    echo "Execute: source /opt/ros/humble/setup.bash"
    exit 1
fi

# Verificar workspace
if [ -f "install/setup.bash" ]; then
    source install/setup.bash
    log "‚úÖ Workspace F1TENTH carregado"
else
    log "‚ùå ERRO: Workspace n√£o compilado"
    echo "Execute: colcon build --symlink-install"
    exit 1
fi

# FASE 2: Teste joystick b√°sico
echo -e "\nFASE 2: Teste joystick b√°sico"
echo "============================="

log "üîç Testando resposta b√°sica do joystick"
timeout 3s sudo jstest --non-interactive "$JOYSTICK_DEV" > /dev/null 2>&1
if [ $? -eq 0 ]; then
    log "‚úÖ Joystick responde aos comandos"
else
    log "‚ö†Ô∏è  Joystick pode n√£o estar respondendo adequadamente"
fi

# FASE 3: Teste ROS2 joy_node
echo -e "\nFASE 3: Teste ROS2 joy_node"
echo "==========================="

log "üöÄ Iniciando joy_node em background"
ros2 run joy joy_node --ros-args -p device_id:=0 > /dev/null 2>&1 &
JOY_NODE_PID=$!
sleep 3

# Verificar se joy_node est√° publicando
log "üîç Verificando publica√ß√£o no t√≥pico /joy"
if timeout 5s ros2 topic echo /joy --once > /dev/null 2>&1; then
    log "‚úÖ T√≥pico /joy publicando dados"
else
    log "‚ùå ERRO: T√≥pico /joy n√£o est√° publicando"
    kill $JOY_NODE_PID 2>/dev/null || true
    exit 1
fi

# Matar joy_node
kill $JOY_NODE_PID 2>/dev/null || true
sleep 1

# FASE 4: Teste sistema completo manual
echo -e "\nFASE 4: Teste sistema completo manual"
echo "====================================="

log "üöÄ Iniciando sistema completo manual"
ros2 launch joy_converter launch_joy_ackerman_fixed.py > "$LOG_FILE.launch" 2>&1 &
LAUNCH_PID=$!
sleep 5

# Verificar se todos os n√≥s est√£o rodando
log "üîç Verificando n√≥s ativos"
ACTIVE_NODES=$(ros2 node list 2>/dev/null | wc -l)
if [ "$ACTIVE_NODES" -ge 2 ]; then
    log "‚úÖ Sistema iniciado: $ACTIVE_NODES n√≥s ativos"
    ros2 node list | while read node; do
        log "   - $node"
    done
else
    log "‚ùå ERRO: Sistema n√£o iniciou corretamente"
    kill $LAUNCH_PID 2>/dev/null || true
    exit 1
fi

# FASE 5: Valida√ß√£o comunica√ß√£o
echo -e "\nFASE 5: Valida√ß√£o comunica√ß√£o"
echo "============================"

# Testar t√≥pico /joy
log "üîç Testando t√≥pico /joy"
if timeout 3s ros2 topic echo /joy --once > /dev/null 2>&1; then
    log "‚úÖ T√≥pico /joy OK"
    JOY_HZ=$(timeout 5s ros2 topic hz /joy 2>/dev/null | grep "average rate" | awk '{print $3}' || echo "N/A")
    log "   Frequ√™ncia /joy: $JOY_HZ Hz"
else
    log "‚ùå T√≥pico /joy com problemas"
fi

# Testar t√≥pico /drive
log "üîç Testando t√≥pico /drive"
if timeout 3s ros2 topic echo /drive --once > /dev/null 2>&1; then
    log "‚úÖ T√≥pico /drive OK"
    DRIVE_HZ=$(timeout 5s ros2 topic hz /drive 2>/dev/null | grep "average rate" | awk '{print $3}' || echo "N/A")
    log "   Frequ√™ncia /drive: $DRIVE_HZ Hz"
else
    log "‚ùå T√≥pico /drive com problemas"
fi

# FASE 6: Teste interativo
echo -e "\nFASE 6: Teste interativo ($TEST_DURATION segundos)"
echo "==============================================="

log "üéØ TESTE INTERATIVO INICIADO"
echo ""
echo "INSTRU√á√ïES PARA TESTE:"
echo "1. Mova o stick ESQUERDO para cima/baixo (velocidade)"
echo "2. Mova o stick DIREITO para esquerda/direita (dire√ß√£o)"
echo "3. Pressione o bot√£o L1/LB para ativar o controle"
echo "4. Observe o movimento f√≠sico do servo/motor"
echo ""
echo "Teste ser√° executado por $TEST_DURATION segundos..."
echo "Pressione Ctrl+C para parar antecipadamente"
echo ""

# Capturar dados de teste
timeout ${TEST_DURATION}s ros2 topic echo /drive > "$LOG_FILE.drive_data" 2>&1 &
ECHO_PID=$!

# Aguardar teste
sleep $TEST_DURATION
kill $ECHO_PID 2>/dev/null || true

# FASE 7: An√°lise resultados
echo -e "\nFASE 7: An√°lise resultados"
echo "=========================="

DRIVE_COMMANDS=$(grep -c "steering_angle\|speed" "$LOG_FILE.drive_data" 2>/dev/null || echo "0")
log "üìä Comandos /drive capturados: $DRIVE_COMMANDS"

if [ "$DRIVE_COMMANDS" -gt 10 ]; then
    log "‚úÖ Sistema respondeu aos comandos do joystick"
    
    # Analisar varia√ß√£o dos comandos
    UNIQUE_ANGLES=$(grep "steering_angle" "$LOG_FILE.drive_data" 2>/dev/null | sort -u | wc -l || echo "0")
    UNIQUE_SPEEDS=$(grep "speed" "$LOG_FILE.drive_data" 2>/dev/null | sort -u | wc -l || echo "0")
    
    log "   Varia√ß√µes steering_angle: $UNIQUE_ANGLES"
    log "   Varia√ß√µes speed: $UNIQUE_SPEEDS"
    
    if [ "$UNIQUE_ANGLES" -gt 3 ] && [ "$UNIQUE_SPEEDS" -gt 3 ]; then
        log "‚úÖ SUCESSO: Controle manual est√° funcionando corretamente!"
    else
        log "‚ö†Ô∏è  Varia√ß√£o limitada - pode precisar mover mais o joystick"
    fi
else
    log "‚ùå Sistema n√£o respondeu adequadamente aos comandos"
fi

# FASE 8: Cleanup
echo -e "\nFASE 8: Finaliza√ß√£o"
echo "=================="

log "üõë Parando sistema"
kill $LAUNCH_PID 2>/dev/null || true
sleep 2

# Matar processos remanescentes
pkill -f "joy_node" 2>/dev/null || true
pkill -f "joy_ackerman" 2>/dev/null || true

log "‚úÖ Teste finalizado"

# RESUMO FINAL
echo -e "\nüìã RESUMO DO TESTE"
echo "=================="
echo "Log completo: $LOG_FILE"
echo "Dados drive: $LOG_FILE.drive_data"
echo "Log launch: $LOG_FILE.launch"
echo ""

if [ "$DRIVE_COMMANDS" -gt 10 ] && [ "$UNIQUE_ANGLES" -gt 3 ]; then
    echo "üéâ RESULTADO: CONTROLE MANUAL FUNCIONANDO!"
    echo "‚úÖ Pr√≥ximo passo: Integrar com sistema completo"
else
    echo "‚ö†Ô∏è  RESULTADO: PRECISA AJUSTES"
    echo "üîß Verifique joystick e tente novamente"
fi

echo ""
echo "Para ver detalhes:"
echo "  cat $LOG_FILE"
echo "  tail -f $LOG_FILE.drive_data"
echo "" 